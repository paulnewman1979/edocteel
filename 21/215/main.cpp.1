#include <iostream>
#include <vector>
#include <algorithm>
#include <stdio.h>

using namespace std;

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        if (k > nums.size()) {
            return 0;
        }

        return findKthLargest(nums, 0, nums.size() - 1, k);
    }

private:
    int findKthLargest(vector<int>& nums, const int i, const int j, const int k) {
        if (i == j) return nums[i];
        if (i + 1 == j) {
            return (((k==1) && (nums[i] > nums[j])) || ((k==2) && (nums[j] > nums[i]))) ? nums[i] : nums[j];
        }

        int pivot = nums[j];
        int l = i;
        int m = j - 1;
        while (l < m) {
            while ((l < m) && (nums[l] > pivot)) { ++l; }
            while ((l < m) && (nums[m] < pivot)) { --m; }

            if (l < m) {
                swap(nums[l], nums[m]);
                ++l;
                --m;
            } else {
                break;
            }
        }

        if (nums[l] > pivot) {
            ++l;
        }
        if (l - i + 1 == k) {
            return pivot;
        } else if (l - i + 1 > k) {
            return findKthLargest(nums, i, l - 1, k);
        } else {
            return findKthLargest(nums, l, j - 1, k - (l - i + 1));
        }
    }
};

int main(int argc, char* argv[])
{
    int n;
    vector<int> nums;
    int num;
    int k;

    cin >> k;
    cin >> n;
    while (n > 0) {
        cin >> num;
        nums.push_back(num);
        --n;
    }

    Solution solution;
    cout << solution.findKthLargest(nums, k) << endl;

    return 0;
}
